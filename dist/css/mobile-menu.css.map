{"version":3,"file":"css/mobile-menu.css","mappings":"AAgCA;EACE,2CA3BqB;EA4BrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AA/BF;AAiCE;EACE;AA/BJ;;AAmCA;EC1CE;EACA;EACA;ED0CA;AA9BF;ACVE;EACE;ADYJ;ACVI;EACE;ADYN;;AA2BA;EACE;EACA;EACA;AAxBF;;AA2BA;EACE;EACA;EACA,cAtDuB;EAuDvB;EACA;EACA;EACA;EACA,iBAvCwB;EAwCxB;EACA;EAQA;EACA;EACA;EACA;EACA;AA/BF;AAiCE;EAIE,cA9E2B;AA4C/B;AAqCE;EACE,kBAjEuB;AA8B3B;;AAuCA;EACE;AApCF;;AAuCA;EE5FE;EACA,mBAHS;ECFT,YHsB0B;EGrB1B;EACA,WHqByB;EIxBzB;EJqGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAjCF;AE1EE;EACE,sBARM;AFoFV;AEzEE;EACE;AF2EJ;AGnFE;EACE;EACA;EACA;EACA;AHqFJ;AAwBI;EACE;EACA;AAtBN;AA0BE;EI5HA;AJqGF;;AA4BA;EACE,2CArH6B;EAsH7B;EACA;EACA;AAzBF;AA2BE;EACE,cAvH6B;EAwH7B;AAzBJ;AA2BI;EAGE,cA5HiC;AAiGvC;;AAgCA;EKvHE;EACA;EACA;EAGE;EACA;ELmHF,2CAxI6B;AA+G/B;AMlHE;ENyIF;IK5GM;IACA;ELyFJ;AACF;AKrFE;EACE;EACA;ALuFJ,C","sources":["webpack://gesso/./source/03-components/mobile-menu/mobile-menu.scss","webpack://gesso/./source/00-config/mixins/_list.scss","webpack://gesso/./source/00-config/mixins/_focus.scss","webpack://gesso/./source/00-config/mixins/_image-replace.scss","webpack://gesso/./source/00-config/mixins/_svg-background.scss","webpack://gesso/./source/00-config/mixins/_layout.scss","webpack://gesso/./source/00-config/mixins/_breakpoint.scss"],"sourcesContent":["// Component: Mobile Menu\n// See 03-components/menu/menu--main/mobile-menu-es6.js.\n\n@use 'sass:math';\n@use '00-config' as *;\n\n$mobile-menu-bg-color: rgba(\n  gesso-color(ui, generic, background-light),\n  0.98\n) !default;\n$mobile-menu-link-color: gesso-color(ui, generic, text-dark) !default;\n$mobile-menu-link-hover-color: gesso-color(ui, generic, text-darker) !default;\n$mobile-menu-submenu-fallback-bg-color: gesso-color(\n  ui,\n  generic,\n  background-lighter\n) !default;\n$mobile-menu-submenu-bg-color: rgba(\n  gesso-color(ui, generic, background-lighter),\n  0.98\n) !default;\n$mobile-menu-submenu-link-color: gesso-color(ui, generic, text-dark) !default;\n$mobile-menu-submenu-link-hover-color: gesso-color(\n  ui,\n  generic,\n  text-darker\n) !default;\n$mobile-menu-button-height: 54px;\n$mobile-menu-button-width: 44px;\n$mobile-menu-font-size: gesso-font-size(4);\n$mobile-menu-line-height: gesso-line-height(base);\n\n.c-mobile-menu {\n  background-color: $mobile-menu-bg-color;\n  display: none;\n  left: 0;\n  max-height: 100vh;\n  overflow-y: auto;\n  padding-bottom: 4px;\n  padding-top: 0;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: gesso-z-index(modal);\n\n  &.is-open {\n    display: block;\n  }\n}\n\n.c-mobile-menu__menu {\n  @include list-clean();\n  margin: 0.75em 0 0;\n}\n\n.c-mobile-menu__item {\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n.c-mobile-menu__link {\n  background-color: transparent;\n  border: 0;\n  color: $mobile-menu-link-color;\n  display: block;\n  font-family: gesso-font-family(system);\n  font-size: rem($mobile-menu-font-size);\n  font-weight: gesso-font-weight(bold);\n  line-height: $mobile-menu-line-height;\n  margin: 0;\n  padding: rem(\n      math.div(\n        $mobile-menu-button-height -\n          ($mobile-menu-font-size * $mobile-menu-line-height),\n        2\n      )\n    )\n    rem(gesso-spacing(2));\n  text-align: left;\n  text-decoration: none;\n  white-space: normal;\n  width: auto;\n  z-index: 3;\n\n  &:hover,\n  &:focus,\n  &:active,\n  &.is-active {\n    color: $mobile-menu-link-hover-color;\n  }\n\n  &.has-subnav {\n    margin-right: $mobile-menu-button-width;\n  }\n}\n\nbutton.c-mobile-menu__link {\n  cursor: pointer;\n}\n\n.c-mobile-menu__subnav-arrow {\n  @include focus();\n  @include image-replace($mobile-menu-button-width, $mobile-menu-button-height);\n  @include svg-background(mobile-arrow-down);\n  background-attachment: initial;\n  background-color: initial;\n  background-position: 50%;\n  background-repeat: no-repeat;\n  background-size: 19px 12px;\n  border: 0;\n  box-shadow: none;\n  cursor: pointer;\n  display: inline-block;\n  outline-offset: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  vertical-align: top;\n  z-index: 2;\n\n  @if $support-for-rtl {\n    [dir='rtl'] & {\n      left: 0;\n      right: auto;\n    }\n  }\n\n  &[aria-expanded='true'] {\n    @include svg-background(mobile-arrow-up);\n  }\n}\n\n.c-mobile-menu__subnav {\n  background-color: $mobile-menu-submenu-bg-color;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  .c-mobile-menu__link {\n    color: $mobile-menu-submenu-link-color;\n    padding-left: gesso-spacing(3);\n\n    &:hover,\n    &:focus,\n    &:active {\n      color: $mobile-menu-submenu-link-hover-color;\n    }\n  }\n}\n\n.c-mobile-menu__section-inner {\n  @include layout-constrain();\n  background-color: $mobile-menu-submenu-bg-color;\n}\n","// Mixins: List\n\n@use '../config.settings' as *;\n@use '../functions' as *;\n@use 'clearfix' as *;\n@use 'breakpoint' as *;\n\n@mixin list-clean {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    padding-left: 0;\n\n    &::before {\n      display: none;\n    }\n  }\n}\n\n@mixin list-inline {\n  list-style-type: none;\n  margin-left: 0;\n  padding-left: 0;\n\n  li {\n    padding-left: 0;\n  }\n\n  > li {\n    display: inline;\n  }\n}\n\n@mixin list-pipeline($pipeline-border-color: gesso-color(ui, generic, border)) {\n  @include clearfix();\n  list-style-type: none;\n  margin-left: 0;\n  padding-left: 0;\n\n  > li {\n    border-right: 1px solid $pipeline-border-color; // LTR\n    display: block;\n    float: left; // LTR\n    margin-right: 0.75em; // LTR\n    padding-left: 0;\n    padding-right: 0.75em; // LTR\n\n    @if $support-for-rtl {\n      [dir='rtl'] & {\n        border-left: 1px solid $pipeline-border-color;\n        border-right: 0;\n        float: right;\n        margin-left: 0.75em;\n        margin-right: 0;\n        padding-left: 0.75em;\n        padding-right: 0;\n      }\n    }\n\n    &.is-active {\n      font-weight: gesso-font-weight(bold);\n    }\n\n    &:last-child {\n      border-right: 0; // LTR\n      margin-right: 0; // LTR\n      padding-right: 0; // LTR\n\n      @if $support-for-rtl {\n        [dir='rtl'] & {\n          border-left: 0;\n          margin-left: 0;\n          padding-left: 0;\n        }\n      }\n    }\n  }\n}\n\n@mixin list-border(\n  $list-border-padding: 0.25rem,\n  $list-border-color: gesso-color(ui, generic, border)\n) {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0;\n\n  li {\n    padding-left: 0;\n  }\n\n  > li {\n    border-bottom: 1px solid $list-border-color;\n    padding: $list-border-padding;\n  }\n}\n\n@mixin list-column(\n  $list-column-count: 2,\n  $list-column-gap: 2em,\n  $list-item-padding: 0.25em\n) {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0;\n\n  li {\n    padding-left: 0;\n  }\n\n  > li {\n    break-inside: avoid-column;\n    display: table; // break-inside alternative for Firefox\n    margin-bottom: 0;\n    padding-bottom: $list-item-padding; // use padding instead of margin for Safari bug with CSS columns\n  }\n\n  @include breakpoint(500px) {\n    column-count: $list-column-count;\n    column-gap: $list-column-gap;\n  }\n}\n","// Mixins: Focus\n\n@use '00-config/functions/gesso' as *;\n\n@mixin focus(\n  $color: gesso-color(ui, generic, focus),\n  $width: 2px,\n  $offset: 2px\n) {\n  outline: $width solid transparent;\n  outline-offset: $offset;\n\n  &:focus {\n    outline-color: $color;\n  }\n\n  &:focus:not(:focus-visible) {\n    outline-color: transparent;\n  }\n}\n","// Mixins: Image Replace\n\n// After applying mixin, inline elements will need the display property set to\n// block or inline-block.\n@mixin image-replace($width, $height: $width) {\n  height: $height;\n  overflow: hidden;\n  width: $width;\n\n  &::before {\n    content: '';\n    display: block;\n    height: 150%;\n    width: 0;\n  }\n}\n\n// This image replacement approach works with <input> and <button> elements.\n// The font-size declaration may cause problems for SEO and browsers with a\n// minimum font-size setting. Other inherited styles might also cause problems.\n@mixin image-replace-alt($width, $height: $width) {\n  color: transparent;\n  font: 0/0 a;\n  height: $height;\n  text-shadow: none;\n  width: $width;\n}\n","// Mixins: SVG Background\n\n@mixin svg-background($image-name, $image-location: 'images/backgrounds/') {\n  $url: $image-location + $image-name + '.svg';\n  background-image: url($url);\n}\n\n@mixin svgz-background($image-name, $image-location: 'images/backgrounds/') {\n  $url: $image-location + $image-name + '.svgz';\n  background-image: url($url);\n}\n","// Mixins: Layout\n\n@use '../functions' as *;\n@use 'breakpoint' as *;\n\n@mixin layout-align-left($margin) {\n  float: left;\n\n  @if $margin {\n    margin-right: $margin;\n  }\n}\n\n@mixin layout-align-right($margin) {\n  float: right;\n\n  @if $margin {\n    margin-left: $margin;\n  }\n}\n\n@mixin layout-align-none {\n  float: none;\n  margin-left: 0;\n  margin-right: 0;\n}\n\n@mixin layout-constrain(\n  $max-width: gesso-constrain(md),\n  $margins-mobile: gesso-site-margins(mobile),\n  $margins: gesso-site-margins(desktop)\n) {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem($max-width);\n\n  @if $margins-mobile {\n    padding-left: rem($margins-mobile);\n    padding-right: rem($margins-mobile);\n  }\n\n  @if $margins {\n    @include breakpoint(gesso-breakpoint(desktop)) {\n      padding-left: rem($margins);\n      padding-right: rem($margins);\n    }\n  }\n\n  // Just in case .l-constrain is nested within another .l-constrain.\n  & & {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n// Breaks something outside its parent l-constrain or other centered container\n// and makes it flush with the edge of the viewport.\n@mixin layout-full-bleed() {\n  left: 50%;\n  margin-left: -50vw;\n  margin-right: -50vw;\n  position: relative;\n  right: 50%;\n  width: 100vw;\n}\n\n// Reverses the above.\n@mixin layout-undo-full-bleed() {\n  left: auto;\n  margin-left: 0;\n  margin-right: 0;\n  position: static;\n  right: auto;\n  width: auto;\n}\n","// Mixins: Breakpoint\n// A 16px base value is passed to em() functions within breakpoint mixins due\n// to browsers not using the Gesso base font size for media query calculations.\n\n@use 'sass:string';\n@use '../config.settings' as *;\n@use '../functions' as *;\n\n// Create a min-width media query.\n// @param {Number} $breakpoint - width value.\n@mixin breakpoint-min($breakpoint) {\n  @if $breakpoints-ems {\n    $breakpoint: em($breakpoint, 16px);\n  }\n  @media (min-width: #{$breakpoint}) {\n    @content;\n  }\n}\n\n// Assume min-width if shorthand breakpoint mixin is used.\n// @param {Number} $breakpoint - width value.\n@mixin breakpoint($breakpoint) {\n  @include breakpoint-min($breakpoint) {\n    @content;\n  }\n}\n\n// Create a max-width media query.\n// @param {Number} $breakpoint - width value.\n// @param {Boolean} $subtract_1_from_max - whether to subtract 1px from $breakpoint value.\n@mixin breakpoint-max($breakpoint, $subtract_1_from_max: false) {\n  @if $subtract_1_from_max {\n    $breakpoint: px($breakpoint) - 1px;\n  }\n  @if $breakpoints-ems {\n    $breakpoint: em($breakpoint, 16px);\n  }\n  @media (max-width: #{$breakpoint}) {\n    @content;\n  }\n}\n\n// Create a media query with both min-width and max-width.\n// @param {Number} $breakpoint-min - width value.\n// @param {Number} $breakpoint-max - width value.\n// @param {Boolean} $subtract_1_from_max - whether to subtract 1px from $breakpoint-max value.\n@mixin breakpoint-min-max(\n  $breakpoint-min,\n  $breakpoint-max,\n  $subtract_1_from_max: false\n) {\n  @if $subtract_1_from_max {\n    $breakpoint-max: px($breakpoint-max) - 1px;\n  }\n  @if $breakpoints-ems {\n    $breakpoint-min: em($breakpoint-min, 16px);\n    $breakpoint-max: em($breakpoint-max, 16px);\n  }\n  @media (min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max}) {\n    @content;\n  }\n}\n"],"names":[],"sourceRoot":""}
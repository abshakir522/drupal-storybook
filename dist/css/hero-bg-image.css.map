{"version":3,"file":"css/hero-bg-image.css","mappings":"AAMA;EACE;EACA;EACA;EACA;EACA;AALF;AAOE;EACE;EACA;EACA;KAAA;EACA;EACA;EACA;AALJ;AASI;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAPN;;AAYA;EACE;EACA;AATF;;AAYA;EC1BM;EAAA;EAAA;EAAA;ECsBF;EAEA;EFIF;EACA;AAJF;AGHE;EHIF;IAMI;IACA;EAHF;AACF;;AAMA;ECrCM;EAAA;EAFA;EAEA;EAAA;EDuCJ;EACA;AACF;AGnBE;EHeF;IAMI;IACA;EAEF;AACF;;AACA;EACE;AAEF;AGpDE;EHiDF;IAII;IACA;EAGF;AACF;;AAAA;EACE;AAGF;AG9DE;EH0DF;IAII;IACA;EAIF;AACF,C","sources":["webpack://gesso/./source/03-components/hero-bg-image/hero-bg-image.scss","webpack://gesso/./source/00-config/mixins/_display-text-style.scss","webpack://gesso/./source/00-config/mixins/_responsive-font-size.scss","webpack://gesso/./source/00-config/mixins/_breakpoint.scss"],"sourcesContent":["// Component: Hero with Background Image\n\n@use '00-config' as *;\n\n$hero-bg-image-bp: gesso-breakpoint(desktop) !default;\n\n.c-hero-bg-image {\n  color: gesso-color(text, on-dark);\n  overflow: hidden;\n  padding: rem(gesso-spacing(12)) 15%;\n  position: relative;\n  text-align: center;\n\n  > img {\n    height: 100%;\n    left: 0;\n    object-fit: cover;\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n\n  &.has-overlay {\n    &::after {\n      background: rgba(0, 0, 0, 0.5);\n      bottom: 0;\n      content: '';\n      left: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n      z-index: 1;\n    }\n  }\n}\n\n.c-hero-bg-image__content {\n  position: relative;\n  z-index: 2;\n}\n\n.c-hero-bg-image__title {\n  @include display-text-style(display);\n  color: gesso-color(text, on-dark);\n  margin-bottom: rem(gesso-spacing(5));\n\n  @include breakpoint-max($hero-bg-image-bp, true) {\n    font-size: rem(gesso-font-size(8));\n    margin-bottom: rem(gesso-spacing(3));\n  }\n}\n\n.c-hero-bg-image__summary {\n  @include display-text-style(body-large);\n  color: gesso-color(text, on-dark);\n  margin-bottom: rem(gesso-spacing(5));\n\n  @include breakpoint-max($hero-bg-image-bp, true) {\n    font-size: rem(gesso-font-size(3));\n    margin-bottom: rem(gesso-spacing(3));\n  }\n}\n\n.c-hero-bg-image--left {\n  text-align: left;\n\n  @include breakpoint($hero-bg-image-bp) {\n    padding-left: 10%;\n    padding-right: 35%;\n  }\n}\n\n.c-hero-bg-image--right {\n  text-align: left;\n\n  @include breakpoint($hero-bg-image-bp) {\n    padding-left: 35%;\n    padding-right: 10%;\n  }\n}\n","// Mixins: Display Text Style\n\n@use '../functions' as *;\n@use './responsive-font-size' as *;\n\n@mixin display-text-style($keys...) {\n  $display: gesso-get-map(typography, display, $keys...);\n\n  @each $property, $value in $display {\n    @if ($property == 'responsive-font-size') {\n      @include responsive-font-size($value);\n    } @else if ($property == 'font-size') {\n      // Check for px if not output value.\n      #{$property}: #{rem(convert($value))};\n    } @else {\n      #{$property}: #{$value};\n    }\n  }\n}\n","// Mixins: Responsive Font Size\n\n@use 'sass:math';\n@use '../config.settings' as *;\n@use '../functions' as *;\n\n@mixin responsive-font-size($font-scale) {\n  $min-size: rem(\n    gesso-get-map(typography, responsive-font-size, $font-scale, min)\n  );\n  $max-size: rem(\n    gesso-get-map(typography, responsive-font-size, $font-scale, max)\n  );\n\n  @if $min-size == $max-size {\n    font-size: $min-size;\n  } @else {\n    $ideal-size: gesso-get-map(\n      typography,\n      responsive-font-size,\n      $font-scale,\n      val\n    );\n    @if $ideal-size == 'auto' {\n      // For more details on how we calculate the ideal size:\n      // https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/\n      $min-width: rem(\n        gesso-get-map(typography, responsive-font-size-min-width)\n      );\n      $max-width: rem(\n        gesso-get-map(typography, responsive-font-size-max-width)\n      );\n      $slope: math.div($max-size - $min-size, $max-width - $min-width);\n      $intersection: -1 * $min-width * $slope + $min-size;\n      $ideal-size: $intersection + ' + ' + $slope * 100vw;\n    }\n\n    font-size: clamp(#{$min-size}, #{$ideal-size}, #{$max-size});\n    // stylelint-disable-next-line\n    -webkit-marquee-increment: 0vw; // Needed to get clamp() to work in Safari.\n  }\n}\n","// Mixins: Breakpoint\n// A 16px base value is passed to em() functions within breakpoint mixins due\n// to browsers not using the Gesso base font size for media query calculations.\n\n@use 'sass:string';\n@use '../config.settings' as *;\n@use '../functions' as *;\n\n// Create a min-width media query.\n// @param {Number} $breakpoint - width value.\n@mixin breakpoint-min($breakpoint) {\n  @if $breakpoints-ems {\n    $breakpoint: em($breakpoint, 16px);\n  }\n  @media (min-width: #{$breakpoint}) {\n    @content;\n  }\n}\n\n// Assume min-width if shorthand breakpoint mixin is used.\n// @param {Number} $breakpoint - width value.\n@mixin breakpoint($breakpoint) {\n  @include breakpoint-min($breakpoint) {\n    @content;\n  }\n}\n\n// Create a max-width media query.\n// @param {Number} $breakpoint - width value.\n// @param {Boolean} $subtract_1_from_max - whether to subtract 1px from $breakpoint value.\n@mixin breakpoint-max($breakpoint, $subtract_1_from_max: false) {\n  @if $subtract_1_from_max {\n    $breakpoint: px($breakpoint) - 1px;\n  }\n  @if $breakpoints-ems {\n    $breakpoint: em($breakpoint, 16px);\n  }\n  @media (max-width: #{$breakpoint}) {\n    @content;\n  }\n}\n\n// Create a media query with both min-width and max-width.\n// @param {Number} $breakpoint-min - width value.\n// @param {Number} $breakpoint-max - width value.\n// @param {Boolean} $subtract_1_from_max - whether to subtract 1px from $breakpoint-max value.\n@mixin breakpoint-min-max(\n  $breakpoint-min,\n  $breakpoint-max,\n  $subtract_1_from_max: false\n) {\n  @if $subtract_1_from_max {\n    $breakpoint-max: px($breakpoint-max) - 1px;\n  }\n  @if $breakpoints-ems {\n    $breakpoint-min: em($breakpoint-min, 16px);\n    $breakpoint-max: em($breakpoint-max, 16px);\n  }\n  @media (min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max}) {\n    @content;\n  }\n}\n"],"names":[],"sourceRoot":""}